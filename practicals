1)	 Write a program to calculate average of all numbers between n1 and n2(eg.100 to 300 Read values of n1 and n2 from user) 
 
object average { 
  def main(args:Array[String]) 
  { 
      println("enter first no.")     
     var    n1=scala.io.StdIn.readInt()      
println("enter second no.")    
var n2=scala.io.StdIn.readInt()   
var average=0
var sum=0     
for(i<-n1to n2)      
 sum=sum+i         average=sum/(n2-n1+1) 
    println("sum is : "+sum+"  average is : "+average) 
  } 
} Output 
enter first no. 
200 enter second no. 
500 
sum is : 105350  average is : 350 


2)	 Write a program to read five random numbers and check that random numbers are perfect number or not 
 object perfect { 
  def main(args:Array[String]) 
  { 
    for(i<-1 to 5) 
    {  
     var n1=scala.util.Random        
      var n=n1.nextInt(100)
       var sum=0
       for(k<-1 to n-1) 
      { 
        if(n%k==0)  
        {                  
          sum=sum+k 
       }
      }                
      if(sum==n)
         println("number is perfect"+n) 

      else 
        println("number is not perfect"+n) 
    }   
  } 
}

 Output 
number is perfect  28
 number is not perfect  5 
 number is not perfect  74
  number is not perfect  13
number is not perfect  73 



3)	 Write a program to calculate sum of prime numbers between 1 to 100 
 object prime { 
  def main(args:Array[String]) 
  {     
      var sum=0     
      for(k<-2 to 100) 
      {
        var c:Int=0
        for(i<-2 to k-1) 
        {
          if(k%i==0)
          c=c+1        
        }          
        if(c==0)
        sum=sum+k 
      } 
      println(" sum of prime no's is "+sum) 
  } 
} 
Output sum of prime no's is 1060 




4)	 Write a program to find maximum and minimum of an array 
object maxmin { 
  def main(args:Array[String]) 
  {     
 	    println("how many numbers : ")    
      var n=scala.io.StdIn.readInt()    
      var A=new Array[Int](n)    
      for(i<-0 to n-1) 
   	 {       
        println("enter element : ")       
        A(i)=scala.io.StdIn.readInt() 
    	}	 
   	 println("Array elements are : ")    
    for(i<-0 to n-1)    
      print(A(i)+"\t")   
    var max=A(0)    
    var min=A(0)     
    for(i<-0 to n-1) 
  	{ 
      if(A(i)>max)     
       max=A(i)   
      if(A(i)<min)    
      min=A(i)   
   }  
    println("\nmax is : "+max)    
     println("min is : "+min) 
  } 
} 

Output 
how many numbers :  
5 
enter element :  
5 
enter element :  
9 
enter element :  
2 
enter element :  
1 
enter element :  
6 
Array elements are :  
5 	9 	2 	1 	6 	 
max is : 9 min is : 1 
 
5)	 Write a program to calculate transpose of a matrix.  
 
import Array._
 object transpose
 {  
 def main(args:Array[String]) 
  {   
 	 println("enter no. of rows")  
    var row=scala.io.StdIn.readInt()    
    println("enter no. of columns")    
    var col=scala.io.StdIn.readInt()   
    var A=ofDim[Int](row,col)    
    var B=ofDim[Int](col,row)   
    for(i<-0 to row-1)   
    { 
  	   for(j<-0 to col-1)      
      { 
      	  println("enter element")        
          A(i)(j)=scala.io.StdIn.readInt() 
      		 B(j)(i)=A(i)(j) 
   	  }    
    }   
    println("given matrix is : ")    
    for(i<-0 to row-1)    
    { 
     for(j<-0 to col-1) 
     {         
       print(A(i)(j)+"\t") 
     }      
      println(" ")    
    } 
   println("tranpose of given matrix is :  ")    
    for(j<-0 to col-1)    
    { 
     for(i<-0 to row-1) 
     {         
       print(A(i)(j)+"\t") 
     }      
      println(" ") 
    } 
  }
 } 
Output 
enter no. of rows 2 
enter no. of columns 
2 
enter element 3 enter element 5 enter element 2 enter element 
6 
  given matrix is :  
3 	5 	  
2	6 	  
tranpose of given matrix is :   
3	2 	  
5 	6 	  

6)	Write a program to check if the matrix is upper triangular or not. 

import Array._ 
import scala.util.control._
object uppertriagular {  
 def main(args: Array[String])   
 { 
  val loop = new Breaks;  
  println("enter total no. of rows.")  
  var row=scala.io.StdIn.readInt()
	var A=ofDim[Int](row,row)  
  println("enter matrix element"); 
 	for(i<-0 to row-1) 
 { 
 	  for(j<-0 to row-1) 
    { 
 	 	    A(i)(j)=scala.io.StdIn.readInt() 
    } 
 } 
 var flag=0 
 loop.breakable 
 { 
 	  for(i<-0 to row-1) 
    { 
 	    for(j<-0 to row-1) 
      { 	 
 	      if(i>j) 
 	      { 
 	 	      if(A(i)(j)!=0) 
 	 	      { 
 	 	          flag=1  
              loop.break  
 	 	      } 
 	      } 
      } 	 
    } 
  } 
  if(flag==1)  
    println("not upper tringular") 
  else 
 	   println("upper tringular") 
  } 
} 

 Output enter total no. of rows. 
2 
enter matrix element 
2 
1 
0 0 
upper tringular 


7)Write a program to count uppercase letters in a string and convert it to lowercase and display the new string.  
 
object stringuppercase {
  def main(args:Array[String]) 
 { 
   println("enter String")   
   var s=scala.io.StdIn.readLine()
   println(s)  
   var c=s.toCharArray();   
   var cnt=0 
   for(i<-0 to s.length()-1) 
   { 
     var ch=s.charAt(i)
     if(ch>=65&&ch<=90) 
     {
        cnt=cnt+1 
     }
   }    
  println("total no. of uppercase letters: "+cnt)
  println("modified string is : "+s.toLowerCase())  
 } 
} 

Output 
enter String I am PRATIKSHA I am PRATIKSHA 
total no. of uppercase letters: 10 modified string is : i am pratiksha 
 
8)	Write a program to read a character from user and count the number of occurrences of that character.  

object charoccurence { 
  def main(args:Array[String]) 
  {     
     println("enter String") 
     var s=scala.io.StdIn.readLine()
     println("enetr character")
     var ch=scala.io.StdIn.readChar()
     var c=0 
     for(i<-0 to s.length()-1) 
     { 
       var chr=s.charAt(i)
       if(ch==chr) 
      { 
        c=c+1 
      }
     } 
     println("total no of occurence of character: "+c) 
   } 
} 

Output 
enter String i am pratiksha enetr character a 
total no of occurence of character: 3 
 
9)Write a program to read two strings. Remove the occurrence of second string in first string.  
 
object substringremove {
def main(args:Array[String]) 
{
   println("enter string")
   var s=scala.io.StdIn.readLine()
   println("enter substring")
   var s1=scala.io.StdIn.readLine()
    var i=0
    var r=s
    var f=true
    do{
         i=s.indexOf(s1);  
         if(i== -1)
         {      
            f=false   
         }    
        else{
         r=s.substring(0,i)+s.substring(i+s1.length())
         s=r
        }
       }while(f) 
      println("remaining string is :"+r) 
  } 
} 

Output 
enter string i am pratiksha enter substring am 
remaining string is :i  pratiksha 


10)	Define a class CurrentAccount (accNo, name, balance, minBalance). Define appropriate constructors and operations withdraw(), deposit(), viewBalance(). Create an object and perform operations. 
 
  class account 
  {   
   var ano:Int=0
   var name=" "
   var balance=500
  var minbalance=500

   def account() 
   {
     println("enter accno.:")
     var ano=scala.io.StdIn.readInt()
     println("enter name:")     
     var name=scala.io.StdIn.readLine()
    println("total available balance:"+balance) 
  } 

  def deposite() 
  {     
    println("enter deposite ammount:")
    var damount=scala.io.StdIn.readInt()
    if(damount>0)
      balance=balance+damount
      println("after deposition") 
  }
 
  def withdraw() 
  {     
     println("enter withdraw amount")
    var wamount=scala.io.StdIn.readInt()
    if(balance<500) 
    { 
      println("not sufficiant balance") 
    }
   else{ 
     balance=balance-wamount
     println("after withdrawn") 
   }      
  } 

def viewbalance() 
  { 
    println(""+balance)       
    }   
} 

object max{ 
  def main(args:Array[String]) 
  { 
    val a=new account 
    a.account() 
    a.deposite() 
    a.viewbalance() 
    a.withdraw() 
    a.viewbalance() 
  } 
} Output 
enter accno.: 
2 enter name: abc total available balance:500 enter deposite ammount: 
2000 
after deposition 
2500 
enter withdraw amount 
300 
after withdrawn 
2200	
 
11)	Define a class Employee (id, name, salary). Define methods accept() and display(). Display details of employee having maximum salary.  

class emp1 { 
  println("how many employee details you want to enter:")
  var n=scala.io.StdIn.readInt()
  var id=new Array[Int](n)
  var name=new Array[String](n)
  var salary=new Array[Double](n)
  var maxsal:Double=0.0
  var k=0
  
  def accept() 
  { 
    for(i<-0 to n-1) 
    { 
      println("enter employee id:")
      id(i)=scala.io.StdIn.readInt()
      println("enter employee name:")
      name(i)=scala.io.StdIn.readLine()
      println("enter employee salary:")
    salary(i)=scala.io.StdIn.readFloat()  
    }   } 
  
def display() 
  { 
    for(i<-0 to n-1) 
    { 
       if(maxsal<salary(i)) 
       { 
        maxsal=salary(i)
        k=i        
       }     
    }   
     println("\nID:"+id(k)+"\nNAME:"+name(k)+"\nSALARY:"+salary(k)) 
  } 
} 

object employee1 {   def main(args:Array[String]) 
 {
   var d=new emp1() 
    d.accept() 
    println("employee details with maximum salary:") 
    d.display() 
  } 
} Output 
how many employee details you want to enter: 
5 enter employee id: 
1 enter employee name: 
a enter employee salary: 
100 enter employee id: 
2 enter employee name: 
b enter employee salary: 
300 enter employee id: 
3 enter employee name: 
c enter employee salary: 
500 enter employee id: 
4 enter employee name: 
d enter employee salary: 
200 enter employee id: 
5 enter employee name: 
e enter employee salary: 
300 employee details with maximum salary: 
 
ID:3 
NAME:c 
SALARY:500.0 
 
 
12)	. Create abstract class Shape with abstract functions volume() and display(). Extend two classes Cube and Cylinder from it. Calculate volume of each and display it.  
package classandobjects.shapes 
 abstract class Shape {    
   def volume();
   def display(); 
} 
package classandobjects.shapes 
class Cylinder {   var radius:Int=0;   var height:Int=0;   var vol:Double=0;   

def volume() 
  {
    println("Enter radius");
    radius=scala.io.StdIn.readInt();
    println("Enter height");
    height=scala.io.StdIn.readInt();
    vol=3.14*radius*radius*height; 
   }    
  def display() 
  { 
    println("Volume of cube is:- " +vol); 
  } 
} 
package classandobjects.shapes 
 
class Cube extends Shape {   var side:Int=0;   
var vol:Int=0; 

def volume() 
{     
   println("Enter side");
   side=scala.io.StdIn.readInt();
   vol=side*side*side; 
}    
  
def display() 
{ 
  println("Volume of cube is:- " +vol); 
}
} 

package classandobjects.shapes 
 
object shape1 { 
  def main(args:Array[String]) 
  {    
    val cube=new Cube;     
    val cylinder=new Cylinder;
    println("Enter Cube details")
cube.volume();     cube.display(); 
     
println("\n\nEnter Cylinder details")     cylinder.volume();
cylinder.display(); 
  } 
} 


13)	: . Create Lists using five different methods( Lisp style , Java style, fill, range and tabulate methods. 
object createlist { 
  def main(args:Array[String]) 
  { 	    
        println("----------- list ----------------")   
        val x=List(1,2,3,4,5)    
       println("list element"+x) 
       println("------------fill method-----------")    
     val f=List.fill(2)("pratiksha")     
      println("filled element is"+f) 
    println("------------range method-------------")    
     val r=List.range(1,20) 
    println("the list element using range method"+r)     
     println("-----------tabulate method--------------")    
     val t=List.tabulate(10)(n=>n*n*n) 
    println("the element after tabulate element"+t)     
     println("--------------lisp stype method-------------")     
     val l1=1::2::3::Nil 
    println("list using lisp style"+l1) 
    println("---------------scala/java style---------------")     
    val n=List(4,5,6) 
    println("list using scala/java style"+n) 
      } } 
Output 
----------- list ---------------- list elementList(1, 2, 3, 4, 5) ------------fill method----------- filled element isList(pratiksha, pratiksha) ------------range method------------- 
the list element using range methodList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
14, 15, 16, 17, 18, 19) 
-----------tabulate method-------------- 
the element after tabulate elementList(0, 1, 8, 27, 64, 125, 216, 343, 512, 729) 
--------------lisp stype method------------- list using lisp styleList(1, 2, 3) 
---------------scala/java style--------------- list using scala/java styleList(4, 5, 6) 
 
14)	 : Create a list of integers divisible by 3 from List containing numbers from 1 to 50. 
 object listdivisibleby3 { 
  def main(args:Array[String]) 
  { 
     var l1:List[Int]=Nil    
     for(i<-0 to 50)    
     if(i%3==0) 
     {    
          l1=l1:::List(i) 
      }   
      println("List is"+l1) 
  } } 
Output 
List is List(0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48) 

15)	: Create a list of 50 members using function 2n+3. Create second list excluding all    elements multiple of 7. 
object listdivisibleby7 {    def main(args:Array[String]) 
  { 
   val s= List.tabulate(50)(n => 2*(n)+3)    var s2:List[Int]=Nil     for(i<-0 to 50) 
    { 
        if(i%7==0)         { 
          s2=s2:::List(i) 
        }       }       println("List of function 2n+3\n"+s)       println("List of no. divisible by 7\n"+s2) 
  } } 
Output 
List of function 2n+3 
List(3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 
45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 
87, 89, 91, 93, 95, 97, 99, 101) 
List of no. divisible by 7 
List(0, 7, 14, 21, 28, 35, 42, 49) 

16)	Write a user defined functions to convert lowercase letter to uppercase and call the function using Map.  
 
object Ass1 { 
   
  def main(args:Array[String]) 
  {     
    println("Enter the character");
    var a=scala.io.StdIn.readLine();
    convert(a); 
 } 
 def convert(a:String) 
  { 
    var ch=a.map(c=>c.toUpper)
    println(ch) 
  } 
   
} 
 
17)	 Write a program to create map with Rollno and FirstName. Print all student information with same FirstName. 
 
object Ass2 { 
   
  val myMap:Map[Int,String]=Map(1->"Ram",2->"Sham",3-
>"Rajesh",4->"Ram",5->"Raj");

def main(args:Array[String]) 
  { 
    for((k1,v1)<-myMap) 
    { 
      for((k2,v2)<-myMap) 
      { 
        if(v1==v2 && k1!=k2) 
        { 
          println("Rollno- "+k1+" Name- "+v1) 
        } 
      } 
    } 
  } 
   
} 

18)	 Write a program to create two sets and find common elements between them. 

import scala.collection.immutable._ 
object setcommon { 
  def main(args:Array[String]) 
  {     
    val s1=Set(1,2,3,4,5)
    val s2=Set(11,12,23,45,56)
    println(s1)
    println(s2)
    
   //using intersect     
   val i=s1.intersect(s2)
   println("common values:"+i) 

   //using &
   val a=s1.&(s2) 
   println("common values:"+a) 

    //difference     
   val d=s1.diff(s2)
   println("difference is:"+d) 
     
   //Union   
   val u=s1.union(s2)
   println("Union is:"+u) 
  } 
} 
Output 
Set(5, 1, 2, 3, 4) Set(56, 45, 12, 11, 23) common values:Set() common values:Set() 
difference is:Set(5, 1, 2, 3, 4) 
Union is:Set(5, 56, 1, 2, 45, 12, 3, 11, 23, 4) 
 
19)	: Write a program to display largest and smallest element of the Set  
import scala.collection.immutable._ 
object setminmax { 
  def main(args:Array[String]) 
  {     
    val s=Set(5,6,3,9,10,32,56)
    println(s) 
    println("minimum:"+s.min)
    println("maximum:"+s.max) 
  } 
} 
Output 
Set(5, 10, 56, 6, 9, 32, 3) minimum:3 maximum:56 
 
20)	 Write a program to merge two sets and calculate product and average of all elements of the set. 
object setaverage { 
  def main(args:Array[String]) 
  {
     val s1=Set(1,2,3,4,5) 
     val s2=Set(11,12,23,45,56)
     println(s1)   
     println(s2) 

      //Union
     val u=s1.union(s2)
     println("Union is: "+u)     

   //Multiplication and Average
    val m=u.product 
    val l=u.size    
    val s=u.sum 
   println("multiplication is: "+m)     println("addition is: "+s)
    println("average is: "+s/l) 
   } 
} 
Output 
Set(5, 1, 2, 3, 4) 
Set(56, 45, 12, 11, 23) 
Union is: Set(5, 56, 1, 2, 45, 12, 3, 11, 23, 4) multiplication is: 918086400 addition is: 162 average is : 16 
 
 



 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 	 

